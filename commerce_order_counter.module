<?php

/**
 * @file   commerce_order_counter.module
 * @author Augustin Delaporte <guss.tissier@gmail.com>
 *         Ant√≥nio P. P. Almeida <appa@perusio.net>
 * @date   Wed Mar  6 17:34:28 2013
 *
 * @brief  Implements a generic framework for having order numbers/codes
 *         be independent from the order ID. This is particularly useful
 *         when issuing receipts and/or invoices where usually the numbering
 *         must follow a particular scheme. Usually sequential, but it can be
 *         more complicated. In fact arbitrarily complex.
 */

/**
 * Implements hook_menu().
 */
function commerce_order_counter_menu() {
  $items = array();

  $items['admin/commerce/config/order-counter'] = array(
    'title' => 'Order Counter Base Value Setup',
    'description' => 'Setup the base value for the order counter: a human friendly way of counting orders',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_order_counter_settings_form'),
    'access arguments' => array('configure order settings'),
    'file' => 'includes/commerce_order_counter.admin.inc',
  );

  return $items;
} // commerce_order_counter_menu

/**
 * Implements hook_entity_property_info_alter().
 */
function commerce_order_counter_entity_property_info_alter(&$info) {
  // Add the order counter to the site information. Even if this is just a
  // "placeholder" entity, i.e., has no schema it functions as a bin for this
  // value we then recover it using tokens for the rules action.
  $info['site']['properties']['order_counter'] = array(
    'label' => t("Order counter"),
    'description' => t('Number of completed orders.'),
    'getter callback' => 'commerce_order_counter_get_properties',
    'type' => 'text',
  );
} // commerce_order_counter_entity_property_info_alter

/**
 * Entity metadata callback: returns the order counter.
 *
 * @see commerce_order_counter_entity_property_info_alter()
 */
function commerce_order_counter_get_properties($data, array $options, $name) {
  switch ($name) {
    case 'order_counter':
      return commerce_order_counter_get();
  }
} // commerce_order_counter_get_properties

/**
 * Updates the order number of the given order to the specified counter value.
 *
 * @param object $order
 *   The fully loaded order object (to eventually update).
 * @param int|string $number
 *   The number or a string of the order number to be updated to.
 * @param boolean $skip_save
 *   TRUE to skip saving the order after updating the status; used when the
 *   order would be saved elsewhere after the update.
 * @param boolean $revision
 *   TRUE or FALSE indicating whether or not a new revision should be created
 *   for the order if it is saved as part of the status update.
 * @param string $log
 *   If a new revision is created for the update, the log message that will be
 *   used for the revision.
 *
 * @return object
 *   The updated order.
 */
function commerce_order_counter_number_update($order,
                                              $number,
                                              $skip_save = FALSE,
                                              $revision = FALSE,
                                              $log = '') {

  // Get the status on how to act regarding revisions.
  $revision = empty($revision) ? variable_get('commerce_order_auto_revision',
                                              TRUE)
    :
    $revision;

  // Do not update the order if the order number is already the same.
  if ($order->order_number != $number) {
    $order->order_number = $number;

    // If we're saving the order then verify if we need to update the revision
    // also.
    if (!$skip_save) {
      // If the status update should create a new revision, update the order
      // object to reflect this and include a log message.
      if ($revision) {
        $order->revision = TRUE;
        $order->log = $log;
      }
      commerce_order_save($order);
    }
  }

  return $order;
} // commerce_order_counter_update

/**
 *
 * Interface that specifies the way to increment and access the commerce order
 * counter. Each module wanting to have specific order counters should implement
 * this interface. The default implementation offers a simple sequential counter.
 *
 */
interface CommerceOrderCounter {

  /**
   * Sets the value of the commerce order counter.
   *
   * @param int $counter_value
   *   The current value of the counter.
   * @return int
   *   The updated counter.
   */
  public static function set($counter_value);

  /**
   * Gets the current value of the commerce order counter.
   *
   * @return int
   *   The current counter value.
   */
  public static function get();

} // CommerceOrderCounter

/**
 * Wrapper function for the CommerceOrderCounterInterface setter.
 *
 * @param integer|string $counter_value
 *
 * @return integer|string
 *   The new value.
 */
function commerce_order_counter_order_set($counter_value) {
  $class = variable_get('CommerceOrderCounterClass', 'BasicCommerceOrderCounter');
  $class::set($counter_value);
} // commerce_order_counter_order_set

/**
 * Wrapper function for the CommerceOrderCounterInterface getter.
 *
 * @return integer|string
 *   The current counter value.
 */
function commerce_order_counter_order_get() {
  $class = variable_get('CommerceOrderCounterClass', 'BasicCommerceOrderCounter');
  $class::get();
} // commerce_order_counter_order_get

/**
 *
 *  Implements the CommerceOrderCounter interface. Provides a basic
 *  CommerceOrderCounter class that implements a sequential counter.
 *
 */
class BasicCommerceOrderCounter implements CommerceOrderCounterInterface {

  /**
   * The setter for the class.
   *
   * @see CommerceOrderCounterInterface
   */
  public static function commerce_order_counter_set($counter_value) {
    $value = $counter_value;

    variable_set('commerce_order_counter_value', $value++);

    return $value;
  } // commerce_order_counter_set

  /**
   * The getter for the class.
   *
   * @see CommerceOrderCounterInterface
   */
  public static function commerce_order_counter_get() {
    return intval(variable_get('commerce_order_counter_value', 1));
  } // commerce_order_counter_get
}
